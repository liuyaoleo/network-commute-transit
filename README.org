#+TITLE: Network Transit
#+AUTHOR: David James, davidabraham@ucla.edu
#+DATE: 2020 Feb 20

This project calcultes the network travel time between a source and destination point for transit routes.
It uses Open Trip Planner (otp) software to calculate the time difference.

Project was created by [[https://github.com/dj-2805][David James]] for the Institute of Transportation Studies (ITS).

* Design
  1. Program was implemented with Python 3.7 alongside Java
  2. It mains the following dependencies
     | Packages                   |
     |----------------------------|
     | pandas                     |
     | requests                   |
     | datetime                   |
     | multiprocessing (included) |
  3. The Java side is what creates and runs the OTP server, and it needs to be running before running the Python script
  4. The current script has been implemented with it to execute the calculations in parallel
** Files
   - README.org :: documentation on current project
   - networkTransit.py :: the script designed to run concurrently with the software
   - util/intro-otp.pdf :: another tutorial that descibes how to use OTP
* Installing and Setting Up
  Before beging, you will need to run any bash commands from your terminal.
  If you're running a Mac, search for the application called 'terminal'.
  1. _Collecting files_
     1. You will need to collect the otp.jar file
        1. Go [[https://repo1.maven.org/maven2/org/opentripplanner/otp/][here]]
        2. Navigate to the directory of the highest version number and download the file with extension .shaded.jar.
     2. You will need to collect the necessary GTFS files, so OTP knows what transit routes it will generate
        - NOTE :: GTFS files must be zipped up, and all its contents should be in the root of the zip archive
     3. You will need the map file, so OTP knows what area to generate with the transit routes
        - the map file is downloaded from [[http://download.geofabrik.de/][here]] go through the subregions until you find the map resolution that you need and download the .osm.pbf file
  2. _Modifying your pbf map file (not required)_
     1. You should shrink your pbf map file, so that you don't need as much RAM to run the server
        #+BEGIN_SRC bash
          # this is an example of the command that can shrink the pbf file
          # you will need to install osmconvert if your system doesn't have it yet
          osmconvert oregon-latest.osm.pbf -b=-123.043,45.246,-122.276,45.652 --complete-ways -o=portland.pbf
        #+END_SRC
        1. [[https://boundingbox.klokantech.com/][This]] website with the option CSV outputs the value needed for the -b flag
  3. _Organize your files_
     1. After you have gotten the necessary files, we will put the files in the following directory manner
        1. the root directory will be =otp= and it'll contain a =graphs= directoy and the .jar file (1.i.)
        2. the =graphs= directory will have another directory called =current=
        3. the =current= directory will contain your GTFS files (1.ii.) and the pbf map file (step iii.)
           - NOTE :: The =current= directory must only contain *ONE* pbf file, if you decided to shrink the original file, move it somewhere outside of the =otp= directory, so OTP doesn't overwrite.
  4. _Generate the OTP file_
     1. You will run the following command to generate an image of the map with the transit routes
        #+BEGIN_SRC bash
          # make sure you are in the otp directory
          # the following command generates the object file
          java -Xmx3G -jar otp.jar --build graphs/current
        #+END_SRC
        - NOTE ::
          - This takes about 10 minutes to build the file depending on your machine.
          - You should see a =Graph.obj= file in the =current= directory
* Executing
  1. _Start the OTP server_
     1. This command will start up the server
     #+BEGIN_SRC bash
       # Starting up the OTP server requires the following command
       java -Xmx3G -jar otp.jar --router current --graphs graphs --server
     #+END_SRC
     - NOTE :: You will see =Grizzly server running= near the end, meaning that the server is up.
  2. _Response from the server_
     1. The response will give a json output. Where the current script takes the time values of the trip.
        - Remark :: For more documentation on what OTP can output refer to [[http://dev.opentripplanner.org/apidoc/1.0.0/json_Response.html][this]] for a description of their =JSON= response.
  4. Extra Help
     1. If extra instruction is needed to setup OTP refer to [[http://docs.opentripplanner.org/en/latest/Basic-Tutorial/][this]]
